#!/usr/bin/env bash

# Error handling
# TODO: Look into best practices with these things
set -e  # Quit script with last error code when a command fails
set -o pipefail  # Fail pipe when it finishes if a command within it failed
set -u  # Fail when a command uses an unbound variable

# Set directory variables
dotfiles_dir="$HOME/docs/cs/winux-dotfiles"

# Set directory creation commands
mkdir_bin="mkdir -p $HOME/docs/bin"
mkdir_config="mkdir -p $HOME/.config"

# Startup message
echo Running install script for winux-dotfiles/ubuntu

# Check for --dry-run
dry_run=false
for arg in "$@"; do
    if [ "$arg" = "--dry-run" ]; then
        dry_run=true
        echo "dry_run=true"
    else
        echo An invalid argument was provided. Only --dry-run is available. Quitting.
        exit 1
    fi
done
echo

# Create required directories
echo Creating required directories
echo "$mkdir_bin"
if [ $dry_run = false ]; then
    eval "$mkdir_bin"
fi

echo "$mkdir_config"
if [ $dry_run = false ]; then
    eval "$mkdir_config"
fi
echo

# Install packages
apt_packages="git git-lfs gitleaks git-delta pandoc exuberant-ctags clang gcc gdb cgdb ffmpeg shellcheck shfmt w3m ranger lynx"
snap_packages="glow gh"

## Apt packages
echo Upgrading apt packages
apt_upgrade_cmd="sudo apt update && sudo apt upgrade -y"
echo "$apt_upgrade_cmd"
if [ $dry_run = false ]; then
    eval "$apt_upgrade_cmd"
fi
echo

echo Installing apt packages
for pkg in $apt_packages; do
    cmd="sudo apt install -y $pkg"
    echo "$cmd"
    if [ $dry_run = false ]; then
        eval "$cmd"
    fi
done
echo

## Snap packages
echo Installing snap packages
for pkg in $snap_packages; do
    cmd="sudo snap install $pkg"
    echo "$cmd"
    if [ $dry_run = false ]; then
        eval "$cmd"
    fi
done
echo

## TMUX Plugin Manager
echo Installing TMUX Package Manager
tmux_plugin_manager_dir="$HOME/.tmux/plugins/tpm"
tmux_plugin_manager_cmd="git clone https://github.com/tmux-plugins/tpm $tmux_plugin_manager_dir"

proceed_with_tmux_plugin_manager_cmd="false"
if [ -s "$tmux_plugin_manager_dir" ]; then
    echo "WARNING: TMUX Plugin Manager directory $tmux_plugin_manager_dir already exists and is not empty (may already be installed). Would you like to remove it and try to install it? [yes/no]:"
    read -r response
    if [ "$response" = "yes" ]; then
        tmux_plugin_manager_dir_rm_cmd="rm -rf $tmux_plugin_manager_dir"
        echo "$tmux_plugin_manager_dir_rm_cmd"
        if [ $dry_run = false ]; then
            eval "$tmux_plugin_manager_dir_rm_cmd"
        fi
        proceed_with_tmux_plugin_manager_cmd="true"
    fi
else
    proceed_with_tmux_plugin_manager_cmd="true"
fi

if [ $proceed_with_tmux_plugin_manager_cmd = "true" ]; then
    echo "$tmux_plugin_manager_cmd"
    if [ $dry_run = false ]; then
        eval "$tmux_plugin_manager_cmd"
    fi
fi
echo

# Symlinks
echo Creating symlinks

## Custom bashrc
bashrc_symlink_cmd="ln -svi $dotfiles_dir/ubuntu/home/.config/bashrc $HOME/.config"
bashrc_source_cmd="echo source $HOME/.config/bashrc/etc.bash >> $HOME/.bashrc"
echo "$bashrc_symlink_cmd"
if [ $dry_run = false ]; then
    eval "$bashrc_symlink_cmd"
fi

echo "Telling $HOME/.bashrc to source custom bash scripts"
echo "$bashrc_source_cmd"
if [ $dry_run = false ]; then
    eval "$bashrc_source_cmd"
fi
echo

## .gitconfig
gitconfig_cmd="ln -svi $dotfiles_dir/common/home/.gitconfig $HOME/.gitconfig"
echo "$gitconfig_cmd"
if [ $dry_run = false ]; then
    eval "$gitconfig_cmd"
fi

## .gitconfig themes
gitconfig_themes_cmd="ln -svi $dotfiles_dir/common/home/themes.gitconfig $HOME/themes.gitconfig"
echo "$gitconfig_themes_cmd"
if [ $dry_run = false ]; then
    eval "$gitconfig_themes_cmd"
fi

## TMUX
tmux_cmd="ln -svi $dotfiles_dir/ubuntu/home/.tmux.conf $HOME/.tmux.conf"
echo "$tmux_cmd"
if [ $dry_run = false ]; then
    eval "$tmux_cmd"
fi

## Vim
vimrc_cmd="ln -svi $dotfiles_dir/common/home/.vimrc $HOME/.vimrc"
echo "$vimrc_cmd"
if [ $dry_run = false ]; then
    eval "$vimrc_cmd"
fi
echo

## gdb
gdb_cmd="ln -svi $dotfiles_dir/ubuntu/home/.gdbinit $HOME/.gdbinit"
echo "$gdb_cmd"
if [ $dry_run = false ]; then
    eval "$gdb_cmd"
fi
echo

## cgdb
cgdb_cmd="ln -svi $dotfiles_dir/ubuntu/home/.cgdb/cgdbrc $HOME/.cgdb/cgdbrc"
echo "$cgdb_cmd"
if [ $dry_run = false ]; then
    eval "$cgdb_cmd"
fi
echo

# Finishing message
echo Install script finished
if [ $dry_run = true ]; then
    echo "dry_run=true"
fi
